class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # Brute Force O(n^2) : n-length of array
        output = 0
        for i in range(len(s)):
            map = set()
            for j in range(i, len(s)):
                if s[j] in map:
                    break
                map.add(s[j])
            output = max(output, len(map))
        return output

        # Sliding Window O(n) : n-length of array
        output = 0
        map = set()
        l = 0
        for r in range(len(s)):
            while s[r] in map:
                map.remove(s[l])
                l += 1
            map.add(s[r])
            output = max(output, r-l+1)
        return output

        # # Sliding Window O(n) : n-length of array
        output = 0
        map = {}
        l = 0
        for r in range(len(s)):
            if s[r] in map:
                l = max(map[s[r]] + 1, l)
            map[s[r]] = r
            output = max(output, r-l+1)
        return output
