# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        # Hashmap O(n) : n-length of array
        map = set()
        _head = head
        while _head:
            if _head.next in map:
                return True
            map.add(_head)
            _head = _head.next
        return False

        # Two Pointers O(n) : n-length of array
        fast = slow = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
        return False
