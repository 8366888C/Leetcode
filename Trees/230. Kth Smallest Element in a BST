# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        # Sorting O(nlogn) : n-length of array
        map = []
        queue = deque()
        queue.append(root)
        while queue:
            node = queue.popleft()
            if node:
                map.append(node.val)
                queue.append(node.left)
                queue.append(node.right)
        map.sort()
        return map[k-1]

        # Recursion O(n) : n-length of array
        count = 0
        def traverse(node):
            nonlocal count
            if not node: return
            left = traverse(node.left)
            if left is not None: return left
            count += 1
            if count == k:
                return node.val
            right = traverse(node.right)
            if right is not None: return right
        return traverse(root)
