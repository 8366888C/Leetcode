# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        # Recursion O(n) : n-length of array
        def isValidBT(root, left, right):
            if not root:
                return True
            if not left < root.val < right:
                return False
            return isValidBT(root.left, left, root.val) and isValidBT(root.right, root.val, right)
        return isValidBT(root, -float("infinity"), float("infinity"))

        # Queue O(n) : n-length of array
        if not root: return True
        queue = deque()
        queue.append([root, float("-inf"), float("inf")])
        while queue:
            node, left, right = queue.popleft()
            if not left < node.val < right:
                return False
            if node.left:
                queue.append([node.left, left, node.val])
            if node.right:
                queue.append([node.right, node.val, right])
        return True
