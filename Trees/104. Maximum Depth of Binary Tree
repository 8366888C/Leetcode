# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        # Queue O(n) : n-length of array
        queue = deque()
        queue.append([root, 1])
        output = 0
        while queue:
            node, level = queue.popleft()
            if node:
                output = max(output, level)
                queue.append([node.left, level+1])
                queue.append([node.right, level+1])
        return output

        # Stack O(n) : n-length of array
        stack = [[root, 1]]
        output = 0
        while stack:
            node, level = stack.pop()
            if node:
                output = max(output, level)
                stack.append([node.left, level+1])
                stack.append([node.right, level+1])
        return output
        
        # Recursion O(n) : n-length of array
        if not root: return 0
        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))
