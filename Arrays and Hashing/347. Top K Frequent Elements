class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        # Sorting O(nlogn) : n-length of array
        map = {} # value : count
        output = []
        for num in nums:
            map[num] = map.get(num, 0) + 1
        arr = [[count, num] for num, count in map.items()]
        arr.sort(reverse=True)
        for i in range(k):
            output.append(arr[i][1])
        return output

        # Heap O(nlogk) : n-length of array, k-length of heap
        import heapq
        map = {} # value : count
        for num in nums:
            map[num] = map.get(num, 0) + 1
        heap = []
        for num in map.keys():
            heapq.heappush(heap, (map[num], num))
            if len(heap) > k:
                heapq.heappop(heap)
        output = []
        for i in range(k):
            output.append(heapq.heappop(heap)[1])
        return output

        # Bucket O(n) : n-length of array
        map = {} # value : count
        for num in nums:
            map[num] = map.get(num, 0) + 1
        buckets = [[] for _ in range(len(nums) + 1)]
        for num, count in map.items():
            buckets[count].append(num)
        output = []
        for count in range(len(buckets) - 1, 0, -1):
            for num in buckets[count]:
                output.append(num)
                if len(output) == k:
                    return output
